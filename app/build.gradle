plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "org.jetbrains.kotlin.kapt"
    id "com.google.dagger.hilt.android"
//    id "com.google.gms.google-services" enable only when having google-services.json for firebase
}

android {
    def appId = "com.wagarcdev.der"
    def minApi = 23
    def targetApi = 33
    def appVersionCode = 1
    def appVersionName = "1.0.0"

    namespace appId
    compileSdk targetApi

    defaultConfig {
        applicationId appId
        minSdk minApi
        targetSdk targetApi
        versionCode appVersionCode
        versionName appVersionName
        vectorDrawables.useSupportLibrary true
    }

    signingConfigs {
        debug {
            def debugStoreFile = System.getenv("DEBUG_STORE_FILE")
            def debugStorePassword = System.getenv("DEBUG_STORE_PASSWORD")
            def debugKeyAlias = System.getenv("DEBUG_KEY_ALIAS")
            def debugKeyPassword = System.getenv("DEBUG_KEY_PASSWORD")

            if (debugStoreFile == null) {
                def signingProperties = localSigningProperties()

                debugStoreFile = "$rootDir/${signingProperties["DEBUG_STORE_FILE"]}"
                debugStorePassword = signingProperties["DEBUG_STORE_PASSWORD"]
                debugKeyAlias = signingProperties["DEBUG_KEY_ALIAS"]
                debugKeyPassword = signingProperties["DEBUG_KEY_PASSWORD"]
            }

            storeFile = file(debugStoreFile)
            storePassword = debugStorePassword
            keyAlias = debugKeyAlias
            keyPassword = debugKeyPassword
        }

        release {
            def releaseStoreFile = System.getenv("RELEASE_STORE_FILE")
            def releaseStorePassword = System.getenv("RELEASE_STORE_PASSWORD")
            def releaseKeyAlias = System.getenv("RELEASE_KEY_ALIAS")
            def releaseKeyPassword = System.getenv("RELEASE_KEY_PASSWORD")

            if (releaseStoreFile == null) {
                def signingProperties = localSigningProperties()

                releaseStoreFile = "$rootDir/${signingProperties["RELEASE_STORE_FILE"]}"
                releaseStorePassword = signingProperties["RELEASE_STORE_PASSWORD"]
                releaseKeyAlias = signingProperties["RELEASE_KEY_ALIAS"]
                releaseKeyPassword = signingProperties["RELEASE_KEY_PASSWORD"]
            }

            storeFile = file(releaseStoreFile)
            storePassword = releaseStorePassword
            keyAlias = releaseKeyAlias
            keyPassword = releaseKeyPassword
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            debuggable true
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion composeCompilerVer
    }

    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {

    // CORE
    implementation "androidx.core:core-ktx:1.9.0"
    implementation "androidx.activity:activity-compose:1.6.1"


    //SplashScreen
    implementation "androidx.core:core-splashscreen:1.0.0"


    // Compose
    implementation platform("androidx.compose:compose-bom:2023.01.00")
    implementation "androidx.compose.animation:animation"
    implementation "androidx.compose.foundation:foundation"
    implementation "androidx.compose.runtime:runtime"
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.material:material"
    implementation "androidx.compose.material:material-icons-extended"


    // Navigation
    implementation "androidx.navigation:navigation-compose:2.5.3"


    /**
     * Accompanist
     * */
    //UI Controller
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanistVer"
    //Flow Layout
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanistVer"
    //Navigation Animation
    implementation "com.google.accompanist:accompanist-navigation-animation:$accompanistVer"


    //Dagger-Hilt
    implementation "com.google.dagger:hilt-android:$hiltVer"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVer"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"


    //Coil
    implementation "io.coil-kt:coil-compose:2.2.2"


    //LifeCycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVer"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:$lifecycleVer"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycleVer"

    //Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVer"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutinesVer"

    /**
     * Google Cloud Plataform
     */
    //PlayServices - gms
    implementation "com.google.android.gms:play-services-auth:20.4.1"


    // DataStore
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    // ROOM
    implementation "androidx.room:room-runtime:$roomVer"
    implementation "androidx.room:room-ktx:$roomVer"
    kapt "androidx.room:room-compiler:$roomVer"

    /**
     * Firebase
     * */
    implementation platform("com.google.firebase:firebase-bom:31.1.1")
    //Storage
    implementation "com.google.firebase:firebase-storage-ktx"
    //Firestore
    implementation "com.google.firebase:firebase-firestore-ktx"


    /**
     *  Debug & TEST's
     * */
    //JUnit
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVer"
    //Compose
    debugImplementation "androidx.compose.ui:ui-tooling"


}

private def localSigningProperties() {
    def signingProperties = project.rootProject.file("signing.properties")
    if (!signingProperties.exists())
        throw new Exception("Missing signing.properties")

    Properties properties = new Properties()
    properties.load(signingProperties.newDataInputStream())
    return properties
}